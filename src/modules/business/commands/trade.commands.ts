import { Command, CommandRunner } from 'nest-commander';
import { BinanceTradeService } from '../services/binance-trade.service';
import { TelegramService } from '../services/telegram.service';

@Command({ 
  name: 'trade',
  description: 'Qu·∫£n l√Ω giao d·ªãch',
  subCommands: [
    // C√°c l·ªánh con s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y
  ]
})
export class TradeCommands extends CommandRunner {
  constructor(
    private readonly binanceTrade: BinanceTradeService,
  ) {
    super();
  }

  async run() {
    // L·ªánh m·∫∑c ƒë·ªãnh khi ch·∫°y 'trade'
    console.log('Vui l√≤ng s·ª≠ d·ª•ng l·ªánh con. V√≠ d·ª•: trade:start');
  }
}

@Command({ 
  name: 'trade:test-telegram',
  description: 'Ki·ªÉm tra k·∫øt n·ªëi Telegram'
})
export class TestTelegramCommand extends CommandRunner {
  constructor(
    private readonly telegramService: TelegramService,
  ) {
    super();
  }

  async run() {
    try {
      console.log('ƒêang g·ª≠i tin nh·∫Øn ki·ªÉm tra...');
      const message = 'üîî *Ki·ªÉm tra th√¥ng b√°o*\n' +
                     '‚úÖ K·∫øt n·ªëi Telegram ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng\n' +
                     'üïí ' + new Date().toLocaleString();
      
      const result = await this.telegramService.sendMessage(message);
      
      if (result) {
        console.log('‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ki·ªÉm tra th√†nh c√¥ng');
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ki·ªÉm tra');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn ki·ªÉm tra:', error.message);
    }
  }
}

@Command({ 
  name: 'trade:test-binance',
  description: 'Ki·ªÉm tra k·∫øt n·ªëi Binance'
})
export class TestBinanceCommand extends CommandRunner {
  constructor(
    private readonly binanceTrade: BinanceTradeService,
  ) {
    super();
  }

  async run() {
    try {
      console.log('ƒêang ki·ªÉm tra k·∫øt n·ªëi Binance...');
      const balance = await this.binanceTrade.getAvailableBalance();
      console.log('K·∫øt n·ªëi Binance th√†nh c√¥ng!');
      console.log('S·ªë d∆∞ kh·∫£ d·ª•ng:', balance, 'USDT');
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi Binance:', error.message);
    }
  }
}
